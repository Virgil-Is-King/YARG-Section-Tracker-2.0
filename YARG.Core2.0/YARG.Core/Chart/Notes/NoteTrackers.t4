<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

#nullable enable

namespace YARG.Core.Chart
{
<#
var types = new (string upper, string lower, string type)[] {
    ("Tick", "tick", "uint"),
    ("Time", "time", "double"),
};

foreach (var (upper, lower, type) in types)
{
#>
    /// <summary>
    /// Tracks the current note of a note list across <#= lower #>s.
    /// </summary>
    /// <remarks>
    /// Tracks child notes in addition to the parent notes contained directly within the given list.
    /// </remarks>
    public class Note<#= upper #>Tracker<TNote>
        where TNote : Note<TNote>
    {
        private ChartEvent<#= upper #>Tracker<TNote> _tracker;
        private int _childIndex = -1;

        public TNote? Current => _childIndex < 0 ? CurrentParent : CurrentChild;

        public TNote? CurrentParent => _tracker.Current;
        public TNote? CurrentChild => _childIndex >= 0 ? CurrentParent!.ChildNotes[_childIndex] : null;

        public int CurrentParentIndex => _tracker.CurrentIndex;
        public int CurrentChildIndex => _childIndex;

        public Note<#= upper #>Tracker(List<TNote> notes)
        {
            _tracker = new(notes);
        }

        /// <summary>
        /// Updates the state of the note tracker to the given <#= lower #>.
        /// </summary>
        /// <remarks>
        /// Resets the child note state upon a successful update.
        /// </remarks>
        /// <returns>
        /// True if a new note has been reached, false otherwise.
        /// </returns>
        public bool Update(<#= type #> <#= lower #>)
        {
            if (_tracker.Update(<#= lower #>))
            {
                _childIndex = -1;
                return true;
            }

            return false;
        }

        /// <summary>
        /// Updates the state of the note tracker to the given <#= lower #> by a single note.
        /// </summary>
        /// <remarks>
        /// First updates through a note's child notes, then updates to the next note.
        /// </remarks>
        /// <returns>
        /// True if a new note has been reached, false otherwise.
        /// </returns>
        public bool UpdateOnce(<#= type #> <#= lower #>, [NotNullWhen(true)] out TNote? current)
        {
            var currentParent = CurrentParent;
            if (currentParent != null && _childIndex + 1 < currentParent.ChildNotes.Count)
            {
                _childIndex++;
                current = currentParent.ChildNotes[_childIndex];
                return true;
            }

            if (_tracker.UpdateOnce(<#= lower #>, out current))
            {
                _childIndex = -1;
                return true;
            }

            current = Current;
            return false;
        }

        /// <summary>
        /// Resets the state of the note tracker.
        /// </summary>
        public void Reset()
        {
            _tracker.Reset();
            _childIndex = -1;
        }

        /// <summary>
        /// Resets the state of the note tracker to the given <#= lower #>.
        /// </summary>
        public void ResetTo<#= upper #>(<#= type #> <#= lower #>)
        {
            _tracker.ResetTo<#= upper #>(<#= lower #>);
            _childIndex = -1;
        }
    }

<#
}
#>
}